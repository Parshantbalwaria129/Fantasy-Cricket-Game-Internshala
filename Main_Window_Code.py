# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_win.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox


from New_Team import Ui_Dialog as New  # impoting New Window dialog box
from Open_Team import Ui_Dialog as Open # importing open window dialog box
from Evaluate import Ui_Dialog as Eval # importing evaluate window dialog box
from scoreboard import Ui_Dialog as scrboard # importind scoreboard window dialog box

import calculate_points
import sys
import sqlite3

crick = sqlite3.connect("final4.db")
curcrick = crick.cursor()

class Ui_MainWindow(object):
    def __init__(self):
        self.NewDialog = QtWidgets.QMainWindow()
        self.New_secren = New()
        self.New_secren.setupUi(self.NewDialog)

        self.OpenDialog = QtWidgets.QMainWindow()
        self.Open_screen = Open()
        self.Open_screen.setupUi(self.OpenDialog)

        self.EvalDialog = QtWidgets.QMainWindow()
        self.Eval_screen = Eval()
        self.Eval_screen.setupUi(self.EvalDialog)
        
        self.ScrboardDialog = QtWidgets.QMainWindow()
        self.Scrboard_screen = scrboard()
        self.Scrboard_screen.setupUi(self.ScrboardDialog)

    def setupUi(self, MainWindow):

        #Initialising players points and thare count
        self.batsmans = 0
        self.bowlers = 0
        self.allrounders = 0
        self.wicket_keepers = 0
        self.avi_points = 1000
        self.used_points = 0
        self.total_count = 0

        #lists
        self.bat_l = []
        self.bat_l1 = []
        self.bol_l = []
        self.bol_l1 = []
        self.all_l = []
        self.all_l1 = []
        self.wkt_l = []
        self.wkt_l1 = []
        self.players_name = []
        self.players_value = []
        self.matches_list = ["Match1"]
        self.stats = {}
        self.name_and_value = {}

        self.r_BAT = 0
        self.r_BOW = 0
        self.r_AR = 0
        self.r_WK = 0



        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(825, 623)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(40, 10, 40, 10)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setStyleSheet("background-color: rgb(215, 215, 215)")
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_2.setContentsMargins(1, 1, 1, 1)
        self.verticalLayout_2.setSpacing(12)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.frame_3 = QtWidgets.QFrame(self.frame)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        font.setStyleStrategy(QtGui.QFont.NoAntialias)
        self.frame_3.setFont(font)
        self.frame_3.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_9 = QtWidgets.QLabel(self.frame_3)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout.addWidget(self.label_9)
        self.count_BAT = QtWidgets.QLabel(self.frame_3)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.count_BAT.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.count_BAT.setFont(font)
        self.count_BAT.setObjectName("count_BAT")
        self.horizontalLayout.addWidget(self.count_BAT)
        self.label_7 = QtWidgets.QLabel(self.frame_3)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout.addWidget(self.label_7)
        self.count_BWL = QtWidgets.QLabel(self.frame_3)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.count_BWL.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.count_BWL.setFont(font)
        self.count_BWL.setObjectName("count_BWL")
        self.horizontalLayout.addWidget(self.count_BWL)
        self.label_5 = QtWidgets.QLabel(self.frame_3)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout.addWidget(self.label_5)
        self.count_AR = QtWidgets.QLabel(self.frame_3)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.count_AR.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.count_AR.setFont(font)
        self.count_AR.setObjectName("count_AR")
        self.horizontalLayout.addWidget(self.count_AR)
        self.label_3 = QtWidgets.QLabel(self.frame_3)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        self.count_WK = QtWidgets.QLabel(self.frame_3)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.count_WK.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.count_WK.setFont(font)
        self.count_WK.setObjectName("count_WK")
        self.horizontalLayout.addWidget(self.count_WK)
        self.verticalLayout_2.addWidget(self.frame_3)
        self.verticalLayout_2.setStretch(0, 10)
        self.verticalLayout_2.setStretch(1, 18)
        self.verticalLayout.addWidget(self.frame)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(40)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame_4 = QtWidgets.QFrame(self.frame_2)
        self.frame_4.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_3.setContentsMargins(20, 10, 0, 0)
        self.verticalLayout_3.setSpacing(10)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.frame_7 = QtWidgets.QFrame(self.frame_4)
        self.frame_7.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_7)
        self.horizontalLayout_3.setContentsMargins(-1, -1, 9, -1)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_10 = QtWidgets.QLabel(self.frame_7)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_3.addWidget(self.label_10)
        self.Avi_Points = QtWidgets.QLabel(self.frame_7)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.Avi_Points.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.Avi_Points.setFont(font)
        self.Avi_Points.setObjectName("Avi_Points")
        self.horizontalLayout_3.addWidget(self.Avi_Points)
        self.horizontalLayout_3.setStretch(0, 10)
        self.horizontalLayout_3.setStretch(1, 22)
        self.verticalLayout_3.addWidget(self.frame_7)
        self.frame_9 = QtWidgets.QFrame(self.frame_4)
        self.frame_9.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_9.setObjectName("frame_9")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.frame_9)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.frame_6 = QtWidgets.QFrame(self.frame_9)
        self.frame_6.setEnabled(False)
        self.frame_6.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_6)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.radio_BAT = QtWidgets.QRadioButton(self.frame_6)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.radio_BAT.setFont(font)
        self.radio_BAT.setObjectName("radio_BAT")
        self.horizontalLayout_4.addWidget(self.radio_BAT)
        self.radio_BOW = QtWidgets.QRadioButton(self.frame_6)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.radio_BOW.setFont(font)
        self.radio_BOW.setObjectName("radio_BOW")
        self.horizontalLayout_4.addWidget(self.radio_BOW)
        self.radio_AR = QtWidgets.QRadioButton(self.frame_6)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.radio_AR.setFont(font)
        self.radio_AR.setObjectName("radio_AR")
        self.horizontalLayout_4.addWidget(self.radio_AR)
        self.radio_WK = QtWidgets.QRadioButton(self.frame_6)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.radio_WK.setFont(font)
        self.radio_WK.setObjectName("radio_WK")
        self.horizontalLayout_4.addWidget(self.radio_WK)
        self.verticalLayout_5.addWidget(self.frame_6)
        self.avilable_lw = QtWidgets.QListWidget(self.frame_9)
        self.avilable_lw.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.avilable_lw.setSelectionRectVisible(False)
        self.avilable_lw.setObjectName("")
        self.verticalLayout_5.addWidget(self.avilable_lw)
        self.verticalLayout_3.addWidget(self.frame_9)
        self.verticalLayout_3.setStretch(0, 10)
        self.verticalLayout_3.setStretch(1, 150)
        self.horizontalLayout_2.addWidget(self.frame_4)
        self.label_2 = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(35)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.frame_5 = QtWidgets.QFrame(self.frame_2)
        self.frame_5.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_5)
        self.verticalLayout_4.setContentsMargins(0, 10, 22, 0)
        self.verticalLayout_4.setSpacing(10)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.frame_8 = QtWidgets.QFrame(self.frame_5)
        self.frame_8.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.frame_8)
        self.horizontalLayout_5.setSpacing(4)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_13 = QtWidgets.QLabel(self.frame_8)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_5.addWidget(self.label_13)
        self.Pt_Used = QtWidgets.QLabel(self.frame_8)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.Pt_Used.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.Pt_Used.setFont(font)
        self.Pt_Used.setObjectName("Pt_Used")
        self.horizontalLayout_5.addWidget(self.Pt_Used)
        self.horizontalLayout_5.setStretch(0, 10)
        self.horizontalLayout_5.setStretch(1, 35)
        self.verticalLayout_4.addWidget(self.frame_8)
        self.frame_10 = QtWidgets.QFrame(self.frame_5)
        self.frame_10.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_10.setObjectName("frame_10")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.frame_10)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.frame_11 = QtWidgets.QFrame(self.frame_10)
        self.frame_11.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_11.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_11.setObjectName("frame_11")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_11)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_14 = QtWidgets.QLabel(self.frame_11)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.horizontalLayout_6.addWidget(self.label_14)
        self.Team_Name = QtWidgets.QLabel(self.frame_11)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.Team_Name.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.Team_Name.setFont(font)
        self.Team_Name.setObjectName("Team_Name")
        self.horizontalLayout_6.addWidget(self.Team_Name)
        self.horizontalLayout_6.setStretch(0, 10)
        self.horizontalLayout_6.setStretch(1, 20)
        self.verticalLayout_6.addWidget(self.frame_11)
        self.selected_players_lw = QtWidgets.QListWidget(self.frame_10)
        self.selected_players_lw.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.selected_players_lw.setObjectName("selected_players_lw")
        self.verticalLayout_6.addWidget(self.selected_players_lw)
        self.verticalLayout_4.addWidget(self.frame_10)
        self.verticalLayout_4.setStretch(0, 10)
        self.verticalLayout_4.setStretch(1, 150)
        self.horizontalLayout_2.addWidget(self.frame_5)
        self.horizontalLayout_2.setStretch(0, 1000)
        self.horizontalLayout_2.setStretch(1, 10)
        self.horizontalLayout_2.setStretch(2, 1000)
        self.verticalLayout.addWidget(self.frame_2)
        self.verticalLayout.setStretch(0, 10)
        self.verticalLayout.setStretch(1, 55)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 825, 25))
        self.menubar.setObjectName("menubar")
        self.menuManage_Team = QtWidgets.QMenu(self.menubar)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.menuManage_Team.setFont(font)
        self.menuManage_Team.setObjectName("menuManage_Team")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.actionNEW_Team = QtWidgets.QAction(MainWindow) #New Window
        self.actionNEW_Team.setObjectName("actionNEW_Team")

        self.actionOPEN_TEAM = QtWidgets.QAction(MainWindow)
        self.actionOPEN_TEAM.setObjectName("actionOPEN_TEAM")

        self.actionSAVE_TEAM = QtWidgets.QAction(MainWindow)
        self.actionSAVE_TEAM.setObjectName("actionSAVE_TEAM")

        self.actionEVALUTE_TEAM = QtWidgets.QAction(MainWindow)
        self.actionEVALUTE_TEAM.setObjectName("actionEVALUTE_TEAM")

        self.menuManage_Team.addAction(self.actionNEW_Team)
        self.menuManage_Team.addAction(self.actionOPEN_TEAM)
        self.menuManage_Team.addAction(self.actionSAVE_TEAM)
        self.menuManage_Team.addAction(self.actionEVALUTE_TEAM)
        self.menubar.addAction(self.menuManage_Team.menuAction())

        self.retranslateUi(MainWindow)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #Menu actions
        self.actionNEW_Team.triggered.connect(self.show_new_dialog)
        self.actionSAVE_TEAM.triggered.connect(self.save_current_file)
        self.actionOPEN_TEAM.triggered.connect(self.show_open_dialog)
        self.actionEVALUTE_TEAM.triggered.connect(self.show_evaluate_dialog)     #########

        #side window clicked btns
        self.New_secren.save_name.clicked.connect(self.team_name_error)
        self.Open_screen.openbtn.clicked.connect(self.open_team)
        self.Eval_screen.calscore_btn.clicked.connect(self.show_score_board)
        self.Eval_screen.selecteam_cb.currentTextChanged.connect(self.evaluate_team) ############


        #Radio buttons action
        self.radio_BAT.clicked.connect(self.avilable_batsman)
        self.radio_BOW.clicked.connect(self.avilablw_bowlers)
        self.radio_AR.clicked.connect(self.avilable_allrounder)
        self.radio_WK.clicked.connect(self.avilable_wktkpr)

        #Double click
        self.avilable_lw.itemDoubleClicked.connect(self.increase_players_counts)
        self.selected_players_lw.itemDoubleClicked.connect(self.decrease_players_counts)

    def retranslateUi(self,MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Your Selections"))
        self.label_9.setText(_translate("MainWindow", "Batsmans (BAT)"))
        self.count_BAT.setText(_translate("MainWindow", "##"))
        self.label_7.setText(_translate("MainWindow", "Bowlers (BOW)"))
        self.count_BWL.setText(_translate("MainWindow", "##"))
        self.label_5.setText(_translate("MainWindow", "All Rounders (AR)"))
        self.count_AR.setText(_translate("MainWindow", "##"))
        self.label_3.setText(_translate("MainWindow", "Wicket-Keepers (WK)"))
        self.count_WK.setText(_translate("MainWindow", "##"))
        self.label_10.setText(_translate("MainWindow", "Avilable Points"))
        self.Avi_Points.setText(_translate("MainWindow", "##"))
        self.radio_BAT.setText(_translate("MainWindow", "BAT"))
        self.radio_BOW.setText(_translate("MainWindow", "BOW"))
        self.radio_AR.setText(_translate("MainWindow", "AR"))
        self.radio_WK.setText(_translate("MainWindow", "WK"))
        self.label_2.setText(_translate("MainWindow", ">"))
        self.label_13.setText(_translate("MainWindow", "Points used"))
        self.Pt_Used.setText(_translate("MainWindow", "##"))
        self.label_14.setText(_translate("MainWindow", "Team Name"))
        self.Team_Name.setText(_translate("MainWindow", "#####"))
        self.menuManage_Team.setTitle(_translate("MainWindow", "Manage Team"))
        self.actionNEW_Team.setText(_translate("MainWindow", "NEW TEAM"))
        self.actionNEW_Team.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionOPEN_TEAM.setText(_translate("MainWindow", "OPEN TEAM"))
        self.actionOPEN_TEAM.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionSAVE_TEAM.setText(_translate("MainWindow", "SAVE TEAM"))
        self.actionSAVE_TEAM.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionEVALUTE_TEAM.setText(_translate("MainWindow", "EVALUTE TEAM"))
        self.actionEVALUTE_TEAM.setShortcut(_translate("MainWindow", "Ctrl+E"))

    #Showing New Window (New Menu action)
    def show_new_dialog(self):
        self.NewDialog.show()

    # saving team (Save Menu action)
    def save_current_file(self):
        curcrick.execute("SELECT DISTINCT name FROM teams;")
        name = curcrick.fetchall()
        for i in name:   #deleting already exist team
            if self.Team_Name.text() == i[0]:
                curcrick.execute("DELETE FROM teams WHERE name = '" + self.Team_Name.text() +"';")

        if self.total_count < 11:   #Error
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setWindowTitle("Invalid Player Selection")
            msg.setText("You have to select 11 players to save team")
            msg.setDetailedText("You can select\n4 Batsmans\n4 Bowlers\n2 All Rounders\n1 Wicket keeper")
            msg.exec_()
        else:
            for i in self.name_and_value.keys():
                self.players_name.append(i)
            for j in self.name_and_value.values():
                self.players_value.append(j)
            for k in range(len(self.players_name)):
                try:
                    curcrick.execute("INSERT INTO teams (name,players,value) VALUES (?,?,?)",
                                     (self.Team_Name.text(),self.players_name[k],self.players_value[k]))
                except:
                    print("somthing went wrong")
                    crick.rollback()

                crick.commit()
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setWindowTitle("File saved")
            msg.setText("Your team have been saved sucessfully")
            msg.exec_()
            self.reset_screen()
            return 0

    # open saved teams (Open Menu action)
    def show_open_dialog(self):
        self.reset_screen()
        self.OpenDialog.show()
        curcrick.execute("SELECT DISTINCT name FROM teams;")
        teams = curcrick.fetchall()
        for i in teams:
            self.Open_screen.combo_open.addItem(i[0])

    # Evaluate teams (Evaluate Menu action)
    def show_evaluate_dialog(self):
        self.EvalDialog.show()
        curcrick.execute("SELECT DISTINCT name FROM teams;")
        teamnames = curcrick.fetchall()
        for i in teamnames:
            self.Eval_screen.selecteam_cb.addItem(i[0])
        for i in range(len(self.matches_list)):
            self.Eval_screen.selectmatch_cb.addItem(self.matches_list[i])
        return

    # Showing score board..
    def show_score_board(self):
        self.ScrboardDialog.show()
        self.Scrboard_screen.finalscore.setText(str(self.total))
        #closing files
        self.reset_screen()
        self.EvalDialog.close()

    #open avilable team
    def open_team(self):
        self.reset_screen()
        self.enable_radio_btns()
        self.total_count = 11
        teamname = self.Open_screen.combo_open.currentText()
        self.Team_Name.setText(teamname)
        curcrick.execute("SELECT players FROM teams WHERE name = '" + teamname + "';")
        name = curcrick.fetchall()
        z = []
        sum1 = 0
        for i in name:
            curcrick.execute("SELECT value FROM stats WHERE player = '" + i[0] +"';")
            value = curcrick.fetchall()
            z.append(value[0])
        for j in range(len(z)):
            a = str(name[j]).split("'")
            b = str(z[j]).split(",")
            b1 = b[0].split("(")
            self.name_and_value.update({a[1]:b1[1]})
            self.selected_players_lw.addItem(a[1])
            sum1 += int(b1[1])

        self.used_points = sum1
        self.avi_points = 1000 - sum1
        self.Pt_Used.setText(str(self.used_points))
        self.Avi_Points.setText(str(self.avi_points))
        z1 = []
        for i  in name:
            curcrick.execute("SELECT ctg FROM stats WHERE player = '" + i[0] +"';")
            ctg = curcrick.fetchall()
            ctg1 = str(ctg).split("'")
            z1.append(ctg1[1])

        self.avilable_batsman()
        self.avilablw_bowlers()
        self.avilable_allrounder()
        self.avilable_wktkpr()

        for i in range(len(z1)):
            a = str(name[i]).split("'")
            if z1[i] == "BAT":
                self.batsmans +=1
                self.bat_l.remove(a[1])
            elif z1[i] == "AR":
                self.allrounders += 1
                self.all_l.remove(a[1])
            elif z1[i] == "WK":
                self.wicket_keepers += 1
                self.wkt_l.remove(a[1])
            elif z1[i] == "BWL":
                self.bowlers +=1
                self.bol_l.remove(a[1])

        self.count_BAT.setText(str(self.batsmans))
        self.count_BWL.setText(str(self.bowlers))
        self.count_AR.setText(str(self.allrounders))
        self.count_WK.setText(str(self.wicket_keepers))
        self.avilable_lw.clear()
        self.OpenDialog.close()
        
    #Evaluating team
    def evaluate_team(self):
        self.Eval_screen.Players_lw.clear()
        self.Eval_screen.Points_lw.clear()
        teamname = self.Eval_screen.selecteam_cb.currentText()
        curcrick.execute("SELECT players,value FROM teams WHERE name = '" + teamname+ "';")
        players = curcrick.fetchall()
        players_list = []
        self.total = 0
        for i in players:
            self.Eval_screen.Players_lw.addItem(i[0])
            players_list.append(i[0])
        for i in range(len(players_list)):
            x = calculate_points.players_and_points.get(players_list[i])
            self.Eval_screen.Points_lw.addItem(str(int(x)))
            self.total = self.total + x

    #team name error handler
    def team_name_error(self):
        team_Name = self.New_secren.Team_name.text()
        curcrick.execute("SELECT name FROM teams;")
        n = curcrick.fetchall()

        for i in n:
            if i[0] == team_Name:
                self.Team_Name.setText("")
                massage = QMessageBox()
                massage.setIcon(QMessageBox.Information)
                massage.setWindowTitle("Invalid Team Name")
                massage.setText("Team name is already taken\nPlease enter another name")
                massage.exec_()
                return 0

        if team_Name.isnumeric() or team_Name.isalpha() == False:
            self.Team_Name.setText("")
            massage = QMessageBox()
            massage.setIcon(QMessageBox.Information)
            massage.setWindowTitle("Invalid Team Name")
            massage.setText("Please enter a valid team name ")
            massage.setDetailedText("Team name contain only characters")
            massage.exec_()
            return 0


        elif len(team_Name) == 0:
            massage = QMessageBox()
            massage.setIcon(QMessageBox.Information)
            massage.setWindowTitle("Invalid Team Name")
            massage.setText("Please enter a team name")
            massage.exec_()
            return 0
        else:
            self.reset_screen()
            self.enable_radio_btns()
            self.Team_Name.setText(team_Name)
            self.NewDialog.close()

    #reset all counts and values
    def reset_screen(self):
        self.frame_6.setEnabled(False)
        self.avilable_lw.clear()
        self.selected_players_lw.clear()
        self.Eval_screen.selecteam_cb.clear()
        self.Eval_screen.selectmatch_cb.clear()
        self.bat_l.clear()
        self.bat_l1.clear()
        self.bol_l.clear()
        self.bol_l1.clear()
        self.all_l.clear()
        self.all_l1.clear()
        self.wkt_l.clear()
        self.wkt_l1.clear()
        self.players_name.clear()
        self.players_value.clear()
        self.stats.clear()
        self.name_and_value.clear()

        self.r_BAT = 0
        self.r_BOW = 0
        self.r_AR = 0
        self.r_WK = 0
        self.batsmans = 0
        self.bowlers = 0
        self.allrounders = 0
        self.wicket_keepers = 0
        self.avi_points = 1000
        self.used_points = 0
        self.total_count = 0
        self.team_name = "__________"
        self.count_BAT.setText(str(self.batsmans))
        self.count_BWL.setText(str(self.bowlers))
        self.count_AR.setText(str(self.allrounders))
        self.count_WK.setText(str(self.wicket_keepers))
        self.Avi_Points.setText(str(self.avi_points))
        self.Pt_Used.setText(str(self.used_points))
        self.Team_Name.setText(self.team_name)
        return 0

    #enables radio btns
    def enable_radio_btns(self):
        self.frame_6.setEnabled(True)

    #prints batsman list
    def avilable_batsman(self):
        self.r_BAT += 1
        self.avilable_lw.clear()
        bats = curcrick.execute("SELECT player,value FROM stats WHERE ctg = 'BAT'")
        l1 = bats.fetchall()

        if self.r_BAT < 2:
            for i in l1:
                self.bat_l.append(i[0])
                self.bat_l1.append(i[0])
                self.stats[i[0]] = i[1]
            for j in range(len(self.bat_l)):
                item = QtWidgets.QListWidgetItem(self.bat_l[j])
                self.avilable_lw.addItem(item)
        else:
            for j in range(len(self.bat_l)):
                item = QtWidgets.QListWidgetItem(self.bat_l[j])
                self.avilable_lw.addItem(item)

    #print bowlers list
    def avilablw_bowlers(self):
        self.r_BOW += 1
        self.avilable_lw.clear()
        bowl = curcrick.execute("SELECT player,value FROM stats WHERE ctg = 'BWL'")
        l1 = bowl.fetchall()

        if self.r_BOW < 2:
            for i in l1:
                self.bol_l.append(i[0])
                self.bol_l1.append(i[0])
                self.stats[i[0]] = i[1]
            for j in range(len(self.bol_l)):
                item = QtWidgets.QListWidgetItem(self.bol_l[j])
                self.avilable_lw.addItem(item)

        else:
            for j in range(len(self.bol_l)):
                item = QtWidgets.QListWidgetItem(self.bol_l[j])
                self.avilable_lw.addItem(item)

    #prints allrounder list
    def avilable_allrounder(self):
        self.r_AR += 1
        self.avilable_lw.clear()
        alrd = curcrick.execute("SELECT player,value FROM stats WHERE ctg = 'AR'")
        l1 = alrd.fetchall()

        if self.r_AR < 2:
            for i in l1:
                self.all_l.append(i[0])
                self.all_l1.append(i[0])
                self.stats[i[0]] = i[1]
            for j in range(len(self.all_l)):
                item =  QtWidgets.QListWidgetItem(self.all_l[j])
                self.avilable_lw.addItem(item)

        else:
            for j in range(len(self.all_l)):
                item =  QtWidgets.QListWidgetItem(self.all_l[j])
                self.avilable_lw.addItem(item)

    #prints wicket keepers list
    def avilable_wktkpr(self):
        self.r_WK += 1
        self.avilable_lw.clear()
        wkt = curcrick.execute("SELECT player,value FROM stats WHERE ctg = 'WK'")
        l1 = wkt.fetchall()

        if self.r_WK < 2:
            for i in l1:
                self.wkt_l.append(i[0])
                self.wkt_l1.append(i[0])
                self.stats[i[0]] = i[1]
            for j in range(len(self.wkt_l)):
                item = QtWidgets.QListWidgetItem(self.wkt_l[j])
                self.avilable_lw.addItem(item)

        else:
            for j in range(len(self.wkt_l)):
                item = QtWidgets.QListWidgetItem(self.wkt_l[j])
                self.avilable_lw.addItem(item)

    #points transfer
    def decrease_avilable_points(self,row):
        value = self.stats[row.text()]
        self.avi_points -= int(value)
        self.used_points += int(value)
        self.Avi_Points.setText(str(self.avi_points))
        self.Pt_Used.setText(str(self.used_points))
        return

    def increase_avilable_points(self,row):
        value = self.stats[row.text()]
        self.used_points -= int(value)
        self.avi_points += int(value)
        self.Avi_Points.setText(str(self.avi_points))
        self.Pt_Used.setText(str(self.used_points))
        return
    #increase counts
    def increase_players_counts(self,item):
        self.total_count +=1
        row = self.avilable_lw.takeItem(self.avilable_lw.row(item))
        value  =  self.stats[row.text()]
        self.name_and_value.update({row.text():value})
             
        if row.text() in self.bat_l:
            self.batsmans += 1
            self.count_BAT.setText(str(self.batsmans))
        elif row.text() in self.bol_l:
            self.bowlers += 1
            self.count_BWL.setText(str(self.bowlers))
        elif row.text() in self.all_l:
            self.allrounders += 1
            self.count_AR.setText(str(self.allrounders))
        elif row.text() in self.wkt_l:
            self.wicket_keepers += 1
            self.count_WK.setText(str(self.wicket_keepers))
        self.error(row)           # call to error

    #decrease counts
    def decrease_players_counts(self,item):
        self.total_count -=1
        row = self.selected_players_lw.takeItem(self.selected_players_lw.row(item))
        del self.name_and_value[row.text()]

        if  self.radio_BAT.isChecked() == True and row.text() in self.bat_l1 and row.text() not in self.bat_l:
            self.avilable_lw.addItem(item.text())
        elif self.radio_BOW.isChecked() == True and row.text() in self.bol_l1 and row.text() not in self.bol_l:
            self.avilable_lw.addItem(item.text())
        elif self.radio_AR.isChecked() == True and row.text() in self.all_l1 and row.text() not in self.all_l:
            self.avilable_lw.addItem(item.text())
        elif self.radio_WK.isChecked() == True and row.text() in self.wkt_l1 and row.text() not in self.wkt_l:
            self.avilable_lw.addItem(item.text())

        self.increase_avilable_points(row)

        if row.text() in self.bat_l1:
            self.batsmans -= 1
            self.count_BAT.setText(str(self.batsmans))
        elif row.text() in self.bol_l1:
            self.bowlers -= 1
            self.count_BWL.setText(str(self.bowlers))
        elif row.text() in self.all_l1:
            self.allrounders -= 1
            self.count_AR.setText(str(self.allrounders))
        elif row.text() in self.wkt_l1:
            self.wicket_keepers -= 1
            self.count_WK.setText(str(self.wicket_keepers))

        self.add_to_list(row)

    #removing player from avilabe players list
    def remove_from_list(self, row):
        if row.text() in self.bat_l:
            self.bat_l.remove(row.text())
        elif row.text() in self.bol_l:
            self.bol_l.remove(row.text())
        elif row.text() in self.all_l:
            self.all_l.remove(row.text())
        elif row.text() in self.wkt_l:
            self.wkt_l.remove(row.text())

    #adding players to avilabes players list
    def add_to_list(self,row):
        if row.text() in self.bat_l1 and row.text() not in self.bat_l:
            self.bat_l.append(row.text())
        elif row.text() in self.bol_l1 and row.text() not in self.bol_l:
            self.bol_l.append(row.text())
        elif row.text() in self.all_l1 and row.text() not in self.all_l:
            self.all_l.append(row.text())
        elif row.text() in self.wkt_l1 and row.text() not in self.wkt_l:
            self.wkt_l.append(row.text())

    #errors haldling
    def error(self,row):
        if self.total_count > 11:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setWindowTitle("Invalid Player Selection")
            msg.setText("You can not select more than 11 players")
            msg.setDetailedText("You can select\n4 Batsmans\n4 Bowlers\n2 All Rounders\n1 Wicket keeper")
            msg.exec_()

        if self.batsmans > 4:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setWindowTitle("Invalid Player Selection")
            msg.setText("You can not select more than 4 Batsmans")
            msg.setDetailedText("You can select\n4 Batsmans\n4 Bowlers\n2 All Rounders\n1 Wicket keeper")
            msg.exec_()
            self.total_count -= 1
            self.batsmans -= 1
            self.avilable_lw.addItem(row.text())
            self.count_BAT.setText(str(self.batsmans))
            return
        elif self.bowlers > 4:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setWindowTitle("Invalid Player Selection")
            msg.setText("You can not select more than 4 Bowlers")
            msg.setDetailedText("You can select\n4 Batsmans\n4 Bowlers\n2 All Rounders\n1 Wicket keeper")
            msg.exec_()
            self.total_count -= 1
            self.bowlers -= 1
            self.avilable_lw.addItem(row.text())
            self.count_BWL.setText(str(self.bowlers))
            return
        elif self.allrounders > 2:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setWindowTitle("Invalid Player Selection")
            msg.setText("You can not select more than 2 All Rounders")
            msg.setDetailedText("You can select\n4 Batsmans\n4 Bowlers\n2 All Rounders\n1 Wicket keeper")
            msg.exec_()
            self.total_count -= 1
            self.allrounders -= 1
            self.avilable_lw.addItem(row.text())
            self.count_AR.setText(str(self.allrounders))
            return
        elif self.wicket_keepers > 1:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setWindowTitle("Invalid Player Selection")
            msg.setText("You can not select more than 1 BWicket Keepers")
            msg.setDetailedText("You can select\n4 Batsmans\n4 Bowlers\n2 All Rounders\n1 Wicket keeper")
            msg.exec_()
            self.total_count -= 1
            self.wicket_keepers -= 1
            self.avilable_lw.addItem(row.text())
            self.count_WK.setText(str(self.wicket_keepers))
            return
        else:
            self.remove_from_list(row)
            self.decrease_avilable_points(row)         #call to ad_1
            if self.used_points > 1000:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setWindowTitle("Invalid Player Selection")
                msg.setText("You selct more than 1000 points")
                msg.setDetailedText("You can select\n4 Batsmans\n4 Bowlers\n2 All Rounders\n1 Wicket keeper")
                msg.exec_()
                value = self.stats[row.text()]
                self.avi_points += int(value)
                self.used_points -= int(value)
                self.Avi_Points.setText(str(self.avi_points))
                self.Pt_Used.setText(str(self.used_points))
                if self.radio_BAT.isChecked() == True:
                    self.total_count -= 1
                    self.batsmans -= 1
                    self.avilable_lw.addItem(row.text())
                    self.count_BAT.setText(str(self.batsmans))

                elif self.radio_BOW.isChecked() == True:
                    self.total_count -= 1
                    self.bowlers -= 1
                    self.avilable_lw.addItem(row.text())
                    self.count_BWL.setText(str(self.bowlers))

                elif self.radio_AR.isChecked() == True:
                    self.total_count -= 1
                    self.allrounders -= 1
                    self.avilable_lw.addItem(row.text())
                    self.count_AR.setText(str(self.allrounders))

                elif self.radio_WK.isChecked() == True:
                    self.total_count -= 1
                    self.wicket_keepers -= 1
                    self.avilable_lw.addItem(row.text())
                    self.count_WK.setText(str(self.wicket_keepers))

            else:
                self.selected_players_lw.addItem(row.text())

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())